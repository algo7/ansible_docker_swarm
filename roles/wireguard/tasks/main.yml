# code: language=ansible
---
- name: Install prerequisites
  ansible.builtin.apt:
    update_cache: true
    pkg:
      - wireguard
    state: present

- name: Check if the Wireguard Private Key Exists
  ansible.builtin.stat:
    path: /etc/wireguard/privatekey
  register: wireguard_privatekey

- name: Generate Wireguard Private Key & Public
  ansible.builtin.shell: |
    set -o pipefail
    wg genkey | tee /etc/wireguard/privatekey | wg pubkey | tee /etc/wireguard/publickey
    chmod 600 /etc/wireguard/privatekey
  args:
    executable: /usr/bin/bash
  when: not wireguard_privatekey.stat.exists
  changed_when: false

# The wireguard private key is already encoded with base64, but we slurp it get the content. In this case, it's base64 encoded twice.
- name: Get Base64 Encoded Wireguard Private Key on the Remote Server
  ansible.builtin.slurp:
    src: /etc/wireguard/privatekey
  register: wireguard_privatekey_base64

- name: Create Wireguard Server Configuration
  ansible.builtin.template:
    src: '{{ role_path }}/templates/wireguard.conf.j2'
    dest: /etc/wireguard/wg0.conf
    owner: root
    group: root
    mode: '0600'
  vars:
    encoded_wireguard_private_key: '{{ wireguard_privatekey_base64.content | b64decode }}'
    wireguard_ip_address_cidr: '172.16.0.0/24'
    # Can also be obtained via ip -o -4 route show to default | awk '{print $5}'
    outbound_network_interface: '{{ ansible_default_ipv4.interface }}'
  # technically we can check if the config file exists, but checking for the private key is good enough
  # cuz if the private key exists, the config file should exist too (usually)
  when: not wireguard_privatekey.stat.exists

- name: Enable IP Forwarding
  ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: 1
    sysctl_set: true
    state: present
    reload: true

- name: Enable Wireguard Service
  ansible.builtin.systemd:
    name: wg-quick@wg0
    enabled: true
    state: started
